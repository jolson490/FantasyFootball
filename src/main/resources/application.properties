
# ----------------------------------------
# CORE PROPERTIES
# ----------------------------------------

# LOGGING

# Choices for level: 'ALL', 'TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL', and 'OFF'.
# Note: logging.level.*= # Log levels severity mapping.
logging.level.root=INFO

logging.level.org.springframework=INFO
#logging.level.org.springframework.web=INFO
#
# Uncomment the following lines to get info about binding errors... 
# ...when entering a controller method:
#logging.level.org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod=TRACE
# ...when entering a view:
#logging.level.org.springframework.web.servlet.view.JstlView=TRACE
#
# Uncomment the following lines to get info about URLs being mapped to classes
#logging.level.org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor=DEBUG
#logging.level.org.springframework.beans.factory.annotation.InjectionMetadata=DEBUG
#logging.level.org.springframework.boot.web.servlet.FilterRegistrationBean=DEBUG
#logging.level.org.springframework.boot.web.servlet.ServletContextInitializerBeans=DEBUG
#logging.level.org.springframework.boot.web.servlet.ServletRegistrationBean=DEBUG
#logging.level.org.springframework.context.annotation.ClassPathBeanDefinitionScanner=DEBUG
#logging.level.org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping=DEBUG
#logging.level.org.springframework.web.servlet.handler.SimpleUrlHandlerMapping=DEBUG
#logging.level.org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping=DEBUG
#logging.level.org.springframework.web.servlet.resource.ResourceUrlProvider=DEBUG

#logging.level.org.springframework.jdbc=DEBUG

#logging.level.org.hibernate=INFO
logging.level.org.hibernate.cfg.Environment=WARN
logging.level.org.hibernate.jpa.internal.util.LogHelper=WARN
###logging.level.org.hibernate.tool.hbm2ddl=DEBUG

logging.level.com.ilmservice.fantasyfootball=DEBUG

logging.pattern.console=%date{HH:mm:ss.SSS} %-5level [%thread] %logger{0}: %msg%n
# "-5" means "left justified to a width of five characters".
# And "{0}" outputs the un-qualified logger name (the rightmost segment only - without any packages/dots to the left).

# IDENTITY
#spring.application.name # default is 'application'

# APPLICATION SETTINGS
#
# The following property determines if/how the banner is to be printed.
#spring.main.banner-mode=console
#  Description of each of the allowed values:
#    off: not printed (not the default)
#    console: System.out
#    log: configured logger 

# PROFILES
spring.profiles.active=dev
# prod

# ----------------------------------------
# WEB PROPERTIES
# ----------------------------------------

# EMBEDDED SERVER CONFIGURATION
#
# Context path of the application.
server.context-path=/ILMServices-FantasyFootball
#
# Regardless of the value the following line is set to (or whether it's is commented out), this 
# property does not seem to make any difference - e.g. http://localhost:8080/ILMServices-FantasyFootball/createNFLPlayer
# still yields "Whitelabel Error Page", even if the FantasyFootballApplication constructor is deleted.
server.error.whitelabel.enabled=false 
#
# Display name of the application.
#server.display-name=application 

# SPRING MVC
#
# By default, Spring will look at the /src/main/webapp folder to look for the resources.
spring.mvc.view.prefix= /jsp/
spring.mvc.view.suffix= .jsp

# ----------------------------------------
# DATA PROPERTIES
# ----------------------------------------

# (75.3 Initialize a database using Spring JDBC)
# DATASOURCE (Spring JDBC - Spring Boot's equivalent of Hibernate's "Database connection properties")
#
ff.database.location=//127.0.0.1/nflDB
spring.datasource.url=jdbc:mysql:${ff.database.location}?useSSL=false
#
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#
# (INITIALIZE DB #1of3)
# (Spring DataSource loads SQL from the standard locations schema.sql and data.sql (Spring Boot feature) - if/when those files are found in the root of the classpath.)
# Setting the following property to true will populate the database using schema.sql (& data.sql).
spring.datasource.initialize=false

# JPA

# The following property is true by default.
#spring.data.jpa.repositories.enabled=true

# (INITIALIZE DB #2of3)
# Initialize the schema on startup - default value is false. (75.1 Initialize a database using JPA)
# This flag is not used if Hibernate autoconfig is active (if ddl-auto is defined).
#spring.jpa.generate-ddl=false

# Avoid the default naming strategy, which automatically inserts underscores into table names (e.g. changes "fantasyTeams" to "FANTASY_TEAMS").
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Enable logging of SQL statements - Spring Boot's equivalent of Hibernate's (spring.jpa.properties.)hibernate.show_sql
# (Whether the following property is set to true or false doesn't seem to make a difference - regardless of its value, what seems to
#  determine whether the SQL commands (from *.sql scripts) are printed is whether org.springframework.jdbc.datasource.init.ScriptUtils is set to DEBUG.) 
spring.jpa.show-sql=false

# Note: spring.jpa.properties.*= # Additional native properties to set on the JPA provider.

# JPA: Hibernate: "23.2. General Configuration"
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.current_session_context_class=thread

# JPA: Hibernate: "23.10. Cache Properties"
# Note that the default value of (spring.jpa.properties.)hibernate.cache.use_second_level_cache is true, although the default 'RegionFactory' (hibernate.cache.region.factory_class) is 'NoCachingRegionFactory'.

# JPA: Hibernate: "23.13. Automatic schema generation"
#
# (75.2 Initialize a database using Hibernate)
#
# (INITIALIZE DB #3of3)
# (NOTE: spring.jpa.hibernate.ddl-auto is (supposed to be) shortcut for hibernate.hbm2ddl.auto)
# This property defaults to "none" when not using an embedded database. (Note that if you don't specify/define the spring.jpa.hibernate.ddl-auto property, then for a database that Spring Boot deems to be embedded (i.e. hsqldb, h2 and derby) this property defaults to "create-drop".)
#  * If using an embedded database: when using a *.sql script (e.g. to create the schema(/tables) via spring.datasource.initialize=true), you need to set hbm2ddl.auto to blank/empty string (so that we don't also have Hibernate try to create the same tables from entities classes).
#     * (If hibernate.hbm2ddl.auto is set to any of the following, Hibernate will try to create tables from entities: update, create-drop, or create.)
#spring.jpa.properties.hibernate.hbm2ddl.auto=none
#  Description of each of the allowed values:
#    validate: validate the schema, makes no changes to the database.
#    update: update the schema - using entities/model Java classes. (doesn't drop any existing table. If table doesn't exist then it creates a new table.)
#      (Maintain the schema to follow any changes you make to the Model each time you run the app.)
#    create: creates the schema, destroying previous data. (A file named import.sql (Hibernate feature) in the root of the classpath will be executed on startup.)
#    create-drop: same as create, plus drop the schema at the end of the session.
